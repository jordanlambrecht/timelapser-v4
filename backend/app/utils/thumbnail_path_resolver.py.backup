# backend/app/utils/thumbnail_path_resolver.py
"""
Thumbnail Path Resolution Utility

Provides compatibility layer for resolving thumbnail paths between legacy camera-based
structure and new timelapse-based structure according to architecture document.

This utility handles:
- Path resolution for mixed legacy/new structures
- Fallback mechanisms for missing files
- Validation of file existence
- Migration path detection
"""

from pathlib import Path
from typing import Optional, Tuple, Dict, Any, List
from loguru import logger
from dataclasses import dataclass

from ..config import settings


@dataclass
class ThumbnailPathResult:
    """Result of thumbnail path resolution"""
    path: Optional[Path] = None
    exists: bool = False
    is_legacy_structure: bool = False
    fallback_used: bool = False
    error: Optional[str] = None


class ThumbnailPathResolver:
    """
    Utility for resolving thumbnail paths with legacy/new structure compatibility.
    
    Provides seamless transition between camera-based (legacy) and timelapse-based (new)
    file organization structures.
    """
    
    def __init__(self, data_directory: Optional[str] = None):
        """
        Initialize path resolver.
        
        Args:
            data_directory: Override data directory (uses settings by default)
        """
        self.data_directory = Path(data_directory or settings.data_directory)
    
    def resolve_thumbnail_path(
        self, 
        relative_path: str, 
        camera_id: int,
        timelapse_id: Optional[int] = None,
        size_type: str = "thumbnail",
        fallback_to_legacy: bool = True
    ) -> ThumbnailPathResult:
        """
        Resolve a thumbnail path, handling both legacy and new structures.
        
        Args:
            relative_path: Stored relative path from database
            camera_id: Camera ID for path resolution
            timelapse_id: Timelapse ID (for new structure)
            size_type: 'thumbnail' or 'small'
            fallback_to_legacy: Whether to try legacy structure if new fails
            
        Returns:
            ThumbnailPathResult with resolved path and metadata
        """
        if not relative_path:
            return ThumbnailPathResult(error="No relative path provided")
        
        # Try to resolve the path as stored
        full_path = self.data_directory / relative_path
        
        if full_path.exists():
            return ThumbnailPathResult(
                path=full_path,
                exists=True,
                is_legacy_structure=self._is_legacy_path(relative_path),
                fallback_used=False
            )
        
        # If file doesn't exist at stored location, try alternative structures
        if fallback_to_legacy:
            # Extract filename from relative path
            filename = Path(relative_path).name
            
            # Try new structure if we have timelapse_id
            if timelapse_id and not self._is_legacy_path(relative_path):
                new_path_result = self._try_new_structure(
                    filename, camera_id, timelapse_id, size_type
                )
                if new_path_result.exists:
                    new_path_result.fallback_used = True
                    return new_path_result
            
            # Try legacy structure
            legacy_path_result = self._try_legacy_structure(
                filename, camera_id, size_type
            )
            if legacy_path_result.exists:
                legacy_path_result.fallback_used = True
                return legacy_path_result
        
        # File not found in any structure
        return ThumbnailPathResult(
            path=full_path,
            exists=False,
            is_legacy_structure=self._is_legacy_path(relative_path),
            fallback_used=False,
            error=f"Thumbnail file not found: {relative_path}"
        )
    
    def _is_legacy_path(self, relative_path: str) -> bool:
        """Determine if a path follows legacy camera-based structure."""
        # Legacy paths contain date folders like: cameras/camera-{id}/thumbnails/{date}/
        return "/thumbnails/" in relative_path and len(relative_path.split("/")) >= 5
    
    def _try_new_structure(
        self, 
        filename: str, 
        camera_id: int, 
        timelapse_id: int, 
        size_type: str
    ) -> ThumbnailPathResult:
        """Try to find file in new timelapse-based structure."""
        size_folder = "thumbnails" if size_type == "thumbnail" else "smalls"
        
        new_path = (
            self.data_directory / 
            "cameras" / 
            f"camera-{camera_id}" / 
            f"timelapse-{timelapse_id}" / 
            size_folder / 
            filename
        )
        
        return ThumbnailPathResult(
            path=new_path,
            exists=new_path.exists(),
            is_legacy_structure=False,
            fallback_used=False
        )
    
    def _try_legacy_structure(
        self, 
        filename: str, 
        camera_id: int, 
        size_type: str
    ) -> ThumbnailPathResult:
        """Try to find file in legacy camera-based structure."""
        size_folder = "thumbnails" if size_type == "thumbnail" else "small"
        
        camera_dir = self.data_directory / "cameras" / f"camera-{camera_id}" / size_folder
        
        if not camera_dir.exists():
            return ThumbnailPathResult(
                path=None,
                exists=False,
                is_legacy_structure=True,
                error=f"Legacy {size_folder} directory not found"
            )
        
        # Search through date folders for the file
        for date_dir in camera_dir.iterdir():
            if date_dir.is_dir():
                potential_path = date_dir / filename
                if potential_path.exists():
                    return ThumbnailPathResult(
                        path=potential_path,
                        exists=True,
                        is_legacy_structure=True,
                        fallback_used=False
                    )
        
        return ThumbnailPathResult(
            path=None,
            exists=False,
            is_legacy_structure=True,
            error=f"File not found in legacy structure: {filename}"
        )
    
    def generate_new_thumbnail_path(
        self,
        camera_id: int,
        timelapse_id: int,
        filename: str,
        size_type: str = "thumbnail"
    ) -> Path:
        """
        Generate a thumbnail path using the new timelapse-based structure.
        
        Args:
            camera_id: Camera ID
            timelapse_id: Timelapse ID
            filename: Thumbnail filename
            size_type: 'thumbnail' or 'small'
            
        Returns:
            Path object for new thumbnail location
        """
        size_folder = "thumbnails" if size_type == "thumbnail" else "smalls"
        
        return (
            self.data_directory /
            "cameras" /
            f"camera-{camera_id}" /
            f"timelapse-{timelapse_id}" /
            size_folder /
            filename
        )
    
    def get_relative_path_from_absolute(self, absolute_path: Path) -> str:
        """
        Convert absolute thumbnail path to relative path for database storage.
        
        Args:
            absolute_path: Absolute path to thumbnail file
            
        Returns:
            Relative path string for database storage
        """
        try:
            return str(absolute_path.relative_to(self.data_directory))
        except ValueError:
            # Path is not relative to data directory
            logger.warning(f"Path is not within data directory: {absolute_path}")
            return str(absolute_path)
    
    def validate_thumbnail_paths(
        self, 
        image_data: Dict[str, Any],
        camera_id: int,
        timelapse_id: Optional[int] = None
    ) -> Dict[str, ThumbnailPathResult]:
        """
        Validate multiple thumbnail paths for an image.
        
        Args:
            image_data: Image data dict with thumbnail_path and small_path
            camera_id: Camera ID
            timelapse_id: Timelapse ID (optional)
            
        Returns:
            Dict mapping size types to path resolution results
        """
        results = {}
        
        # Validate thumbnail path
        if image_data.get("thumbnail_path"):
            results["thumbnail"] = self.resolve_thumbnail_path(
                image_data["thumbnail_path"],
                camera_id,
                timelapse_id,
                "thumbnail"
            )
        
        # Validate small path
        if image_data.get("small_path"):
            results["small"] = self.resolve_thumbnail_path(
                image_data["small_path"],
                camera_id,
                timelapse_id,
                "small"
            )
        
        return results
    
    def find_orphaned_thumbnail_files(self) -> List[Dict[str, Any]]:
        """
        Find thumbnail files that exist on disk but may not be properly 
        referenced in database.
        
        Returns:
            List of orphaned file information dicts
        """
        orphaned_files = []
        cameras_dir = self.data_directory / "cameras"
        
        if not cameras_dir.exists():
            return orphaned_files
        
        for camera_dir in cameras_dir.iterdir():
            if not camera_dir.is_dir() or not camera_dir.name.startswith("camera-"):
                continue
            
            try:
                camera_id = int(camera_dir.name.replace("camera-", ""))
            except ValueError:
                continue
            
            # Check legacy structure
            orphaned_files.extend(
                self._scan_legacy_thumbnails(camera_dir, camera_id)
            )
            
            # Check new structure
            orphaned_files.extend(
                self._scan_new_structure_thumbnails(camera_dir, camera_id)
            )
        
        return orphaned_files
    
    def _scan_legacy_thumbnails(self, camera_dir: Path, camera_id: int) -> List[Dict[str, Any]]:
        """Scan legacy thumbnail structure for orphaned files."""
        orphaned = []
        
        for size_folder in ["thumbnails", "small"]:
            size_dir = camera_dir / size_folder
            if not size_dir.exists():
                continue
            
            for date_dir in size_dir.iterdir():
                if not date_dir.is_dir():
                    continue
                
                for file_path in date_dir.iterdir():
                    if file_path.is_file() and file_path.suffix.lower() in ['.jpg', '.jpeg', '.png']:
                        relative_path = str(file_path.relative_to(self.data_directory))
                        
                        orphaned.append({
                            "file_path": file_path,
                            "relative_path": relative_path,
                            "camera_id": camera_id,
                            "size_type": "thumbnail" if size_folder == "thumbnails" else "small",
                            "structure_type": "legacy",
                            "date_folder": date_dir.name,
                            "filename": file_path.name,
                            "file_size": file_path.stat().st_size,
                        })
        
        return orphaned
    
    def _scan_new_structure_thumbnails(self, camera_dir: Path, camera_id: int) -> List[Dict[str, Any]]:
        """Scan new timelapse-based structure for orphaned files."""
        orphaned = []
        
        for item in camera_dir.iterdir():
            if not item.is_dir() or not item.name.startswith("timelapse-"):
                continue
            
            try:
                timelapse_id = int(item.name.replace("timelapse-", ""))
            except ValueError:
                continue
            
            for size_folder in ["thumbnails", "smalls"]:
                size_dir = item / size_folder
                if not size_dir.exists():
                    continue
                
                for file_path in size_dir.iterdir():
                    if file_path.is_file() and file_path.suffix.lower() in ['.jpg', '.jpeg', '.png']:
                        relative_path = str(file_path.relative_to(self.data_directory))
                        
                        orphaned.append({
                            "file_path": file_path,
                            "relative_path": relative_path,
                            "camera_id": camera_id,
                            "timelapse_id": timelapse_id,
                            "size_type": "thumbnail" if size_folder == "thumbnails" else "small",
                            "structure_type": "new",
                            "filename": file_path.name,
                            "file_size": file_path.stat().st_size,
                        })
        
        return orphaned
    
    def get_structure_migration_status(self) -> Dict[str, Any]:
        """
        Analyze the current state of thumbnail structure migration.
        
        Returns:
            Dictionary with migration status information
        """
        status = {
            "legacy_files_found": 0,
            "new_structure_files_found": 0,
            "total_cameras_scanned": 0,
            "migration_recommended": False,
            "structure_type": "mixed",  # legacy, new, or mixed
        }
        
        cameras_dir = self.data_directory / "cameras"
        if not cameras_dir.exists():
            return status
        
        for camera_dir in cameras_dir.iterdir():
            if not camera_dir.is_dir() or not camera_dir.name.startswith("camera-"):
                continue
            
            status["total_cameras_scanned"] += 1
            
            # Count legacy files
            for size_folder in ["thumbnails", "small"]:
                size_dir = camera_dir / size_folder
                if size_dir.exists():
                    for date_dir in size_dir.iterdir():
                        if date_dir.is_dir():
                            for file_path in date_dir.iterdir():
                                if file_path.is_file():
                                    status["legacy_files_found"] += 1
            
            # Count new structure files
            for item in camera_dir.iterdir():
                if item.is_dir() and item.name.startswith("timelapse-"):
                    for size_folder in ["thumbnails", "smalls"]:
                        size_dir = item / size_folder
                        if size_dir.exists():
                            for file_path in size_dir.iterdir():
                                if file_path.is_file():
                                    status["new_structure_files_found"] += 1
        
        # Determine structure type and migration recommendation
        if status["legacy_files_found"] > 0 and status["new_structure_files_found"] == 0:
            status["structure_type"] = "legacy"
            status["migration_recommended"] = True
        elif status["legacy_files_found"] == 0 and status["new_structure_files_found"] > 0:
            status["structure_type"] = "new"
            status["migration_recommended"] = False
        elif status["legacy_files_found"] > 0 and status["new_structure_files_found"] > 0:
            status["structure_type"] = "mixed"
            status["migration_recommended"] = True
        else:
            status["structure_type"] = "none"
            status["migration_recommended"] = False
        
        return status