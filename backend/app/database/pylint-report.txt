************* Module app.database.health_operations

app/database/health_operations.py:45:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/health_operations.py:66:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/health_operations.py:58:12: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
app/database/health_operations.py:131:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/health_operations.py:215:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/health_operations.py:242:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/health_operations.py:259:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module app.database.overlay_operations
app/database/overlay_operations.py:113:0: C0301: Line too long (107/100) (line-too-long)
app/database/overlay_operations.py:139:0: C0301: Line too long (104/100) (line-too-long)
app/database/overlay_operations.py:162:0: C0301: Line too long (104/100) (line-too-long)
app/database/overlay_operations.py:285:0: C0301: Line too long (105/100) (line-too-long)
app/database/overlay_operations.py:287:0: C0301: Line too long (110/100) (line-too-long)
app/database/overlay_operations.py:315:0: C0301: Line too long (107/100) (line-too-long)
app/database/overlay_operations.py:432:0: C0301: Line too long (109/100) (line-too-long)
app/database/overlay_operations.py:434:0: C0301: Line too long (107/100) (line-too-long)
app/database/overlay_operations.py:461:0: C0301: Line too long (104/100) (line-too-long)
app/database/overlay_operations.py:484:0: C0301: Line too long (104/100) (line-too-long)
app/database/overlay_operations.py:541:0: C0301: Line too long (107/100) (line-too-long)
app/database/overlay_operations.py:567:0: C0301: Line too long (104/100) (line-too-long)
app/database/overlay_operations.py:590:0: C0301: Line too long (107/100) (line-too-long)
app/database/overlay_operations.py:709:0: C0301: Line too long (105/100) (line-too-long)
app/database/overlay_operations.py:711:0: C0301: Line too long (110/100) (line-too-long)
app/database/overlay_operations.py:829:0: C0301: Line too long (109/100) (line-too-long)
app/database/overlay_operations.py:831:0: C0301: Line too long (107/100) (line-too-long)
app/database/overlay_operations.py:858:0: C0301: Line too long (104/100) (line-too-long)
app/database/overlay_operations.py:881:0: C0301: Line too long (104/100) (line-too-long)
app/database/overlay_operations.py:128:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:151:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:174:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:202:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:251:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:268:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:302:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:327:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:376:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:399:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:390:12: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
app/database/overlay_operations.py:415:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:450:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:473:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:493:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:509:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:556:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:579:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:602:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:630:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:679:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:696:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:726:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:775:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:800:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:791:12: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
app/database/overlay_operations.py:816:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:847:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:870:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:890:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_operations.py:906:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module app.database.statistics_operations
app/database/statistics_operations.py:67:0: C0301: Line too long (117/100) (line-too-long)
app/database/statistics_operations.py:91:0: C0301: Line too long (110/100) (line-too-long)
app/database/statistics_operations.py:93:0: C0301: Line too long (124/100) (line-too-long)
app/database/statistics_operations.py:109:0: C0301: Line too long (111/100) (line-too-long)
app/database/statistics_operations.py:110:0: C0301: Line too long (114/100) (line-too-long)
app/database/statistics_operations.py:146:0: C0301: Line too long (114/100) (line-too-long)
app/database/statistics_operations.py:147:0: C0301: Line too long (114/100) (line-too-long)
app/database/statistics_operations.py:349:0: C0301: Line too long (124/100) (line-too-long)
app/database/statistics_operations.py:361:0: C0301: Line too long (114/100) (line-too-long)
app/database/statistics_operations.py:466:0: C0301: Line too long (115/100) (line-too-long)
app/database/statistics_operations.py:467:0: C0301: Line too long (124/100) (line-too-long)
app/database/statistics_operations.py:468:0: C0301: Line too long (114/100) (line-too-long)
app/database/statistics_operations.py:51:4: R0914: Too many local variables (18/15) (too-many-locals)
app/database/statistics_operations.py:162:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/statistics_operations.py:416:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/statistics_operations.py:534:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module app.database.weather_operations
app/database/weather_operations.py:28:4: R0913: Too many arguments (11/5) (too-many-arguments)
app/database/weather_operations.py:28:4: R0917: Too many positional arguments (11/5) (too-many-positional-arguments)
app/database/weather_operations.py:95:16: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
app/database/weather_operations.py:99:20: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/weather_operations.py:127:14: W0613: Unused argument 'target_datetime' (unused-argument)
app/database/weather_operations.py:154:4: R0913: Too many arguments (11/5) (too-many-arguments)
app/database/weather_operations.py:154:4: R0917: Too many positional arguments (11/5) (too-many-positional-arguments)
app/database/weather_operations.py:221:16: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
app/database/weather_operations.py:225:20: W0719: Raising too general exception: Exception (broad-exception-raised)
************* Module app.database.settings_operations
app/database/settings_operations.py:95:63: E1135: Value 'Setting.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/settings_operations.py:360:63: E1135: Value 'Setting.model_fields' doesn't support membership test (unsupported-membership-test)
************* Module app.database.video_operations
app/database/video_operations.py:420:0: C0301: Line too long (117/100) (line-too-long)
app/database/video_operations.py:997:0: C0301: Line too long (101/100) (line-too-long)
app/database/video_operations.py:1111:0: C0301: Line too long (122/100) (line-too-long)
app/database/video_operations.py:1:0: C0302: Too many lines in module (1301/1000) (too-many-lines)
app/database/video_operations.py:44:61: E1135: Value 'Video.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/video_operations.py:50:61: E1135: Value 'Video.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/video_operations.py:64:53: E1135: Value 'VideoGenerationJob.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/video_operations.py:79:53: E1135: Value 'VideoGenerationJob.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/video_operations.py:94:4: R0913: Too many arguments (6/5) (too-many-arguments)
app/database/video_operations.py:94:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
app/database/video_operations.py:162:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:233:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/video_operations.py:256:25: E1133: Non-iterable value Video.model_fields is used in an iterating context (not-an-iterable)
app/database/video_operations.py:274:28: E1135: Value 'Video.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/video_operations.py:295:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/video_operations.py:398:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/video_operations.py:443:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/video_operations.py:509:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:538:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:567:53: E1135: Value 'VideoGenerationJob.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/video_operations.py:638:4: R0913: Too many arguments (6/5) (too-many-arguments)
app/database/video_operations.py:638:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
app/database/video_operations.py:694:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:719:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:756:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/video_operations.py:774:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:781:61: E1135: Value 'Video.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/video_operations.py:852:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:813:40: W0613: Unused argument 'event_timestamp' (unused-argument)
app/database/video_operations.py:887:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:857:27: W0613: Unused argument 'event_timestamp' (unused-argument)
app/database/video_operations.py:891:4: R0913: Too many arguments (6/5) (too-many-arguments)
app/database/video_operations.py:891:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
app/database/video_operations.py:931:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:897:8: W0613: Unused argument 'event_timestamp' (unused-argument)
app/database/video_operations.py:978:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:1003:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:1057:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:1085:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:1104:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:1116:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:1153:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:1177:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:1212:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:1237:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:1266:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:1297:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/video_operations.py:543:0: R0904: Too many public methods (22/20) (too-many-public-methods)
************* Module app.database.sse_events_operations
app/database/sse_events_operations.py:71:20: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
app/database/sse_events_operations.py:80:24: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/sse_events_operations.py:236:20: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
app/database/sse_events_operations.py:312:20: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
app/database/sse_events_operations.py:319:24: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/sse_events_operations.py:449:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module app.database.core
app/database/core.py:65:0: C0301: Line too long (127/100) (line-too-long)
app/database/core.py:100:12: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/core.py:181:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/core.py:176:19: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/core.py:233:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/core.py:310:12: W0719: Raising too general exception: Exception (broad-exception-raised)
************* Module app.database.timelapse_operations
app/database/timelapse_operations.py:427:0: C0301: Line too long (103/100) (line-too-long)
app/database/timelapse_operations.py:29:0: C0115: Missing class docstring (missing-class-docstring)
app/database/timelapse_operations.py:69:4: W0105: String statement has no effect (pointless-string-statement)
app/database/timelapse_operations.py:78:65: E1135: Value 'Timelapse.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/timelapse_operations.py:86:65: E1135: Value 'Timelapse.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/timelapse_operations.py:236:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/timelapse_operations.py:264:28: E1135: Value 'Timelapse.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/timelapse_operations.py:309:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/timelapse_operations.py:508:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/timelapse_operations.py:547:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/timelapse_operations.py:564:65: E1135: Value 'Timelapse.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/timelapse_operations.py:849:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/timelapse_operations.py:894:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/timelapse_operations.py:923:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/timelapse_operations.py:947:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/timelapse_operations.py:971:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module app.database.thumbnail_job_operations
app/database/thumbnail_job_operations.py:1:0: C0302: Too many lines in module (1008/1000) (too-many-lines)
app/database/thumbnail_job_operations.py:76:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:116:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:149:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:186:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:225:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:266:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:301:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:337:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:382:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:442:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:474:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:502:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:528:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:598:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:627:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:655:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:680:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:709:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:751:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:784:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:812:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:838:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:869:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:940:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:965:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:982:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/thumbnail_job_operations.py:1006:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module app.database.camera_operations
app/database/camera_operations.py:1:0: C0302: Too many lines in module (1357/1000) (too-many-lines)
app/database/camera_operations.py:74:0: C0115: Missing class docstring (missing-class-docstring)
app/database/camera_operations.py:110:4: W0105: String statement has no effect (pointless-string-statement)
app/database/camera_operations.py:134:57: E1135: Value 'Camera.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/camera_operations.py:238:8: C0415: Import outside toplevel (asyncio) (import-outside-toplevel)
app/database/camera_operations.py:414:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/camera_operations.py:416:4: R0914: Too many local variables (16/15) (too-many-locals)
app/database/camera_operations.py:439:25: E1133: Non-iterable value Camera.model_fields is used in an iterating context (not-an-iterable)
app/database/camera_operations.py:458:28: E1135: Value 'Camera.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/camera_operations.py:488:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/camera_operations.py:530:8: C0415: Import outside toplevel (datetime.timedelta) (import-outside-toplevel)
app/database/camera_operations.py:633:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/camera_operations.py:767:8: W0613: Unused argument 'error_message' (unused-argument)
app/database/camera_operations.py:921:8: C0415: Import outside toplevel (settings_operations.SyncSettingsOperations) (import-outside-toplevel)
app/database/camera_operations.py:1259:8: W0613: Unused argument 'error_message' (unused-argument)
app/database/camera_operations.py:23:0: W0611: Unused HEALTH_STATUSES imported from constants (unused-import)
app/database/camera_operations.py:23:0: W0611: Unused DEFAULT_CORRUPTION_DISCARD_THRESHOLD imported from constants (unused-import)
app/database/camera_operations.py:23:0: W0611: Unused CAMERA_NOT_FOUND imported from constants (unused-import)
app/database/camera_operations.py:23:0: W0611: Unused CAMERA_CAPTURE_SUCCESS imported from constants (unused-import)
app/database/camera_operations.py:23:0: W0611: Unused CORRUPTION_SCORE_FAILED imported from constants (unused-import)
************* Module app.database.overlay_job_operations
app/database/overlay_job_operations.py:281:0: C0301: Line too long (104/100) (line-too-long)
app/database/overlay_job_operations.py:350:0: C0301: Line too long (111/100) (line-too-long)
app/database/overlay_job_operations.py:353:0: C0301: Line too long (142/100) (line-too-long)
app/database/overlay_job_operations.py:354:0: C0301: Line too long (136/100) (line-too-long)
app/database/overlay_job_operations.py:355:0: C0301: Line too long (142/100) (line-too-long)
app/database/overlay_job_operations.py:356:0: C0301: Line too long (209/100) (line-too-long)
app/database/overlay_job_operations.py:94:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:118:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:158:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:162:4: R0913: Too many arguments (6/5) (too-many-arguments)
app/database/overlay_job_operations.py:162:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
app/database/overlay_job_operations.py:214:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:265:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:304:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:337:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:383:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:406:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:432:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:476:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:508:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:528:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:550:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/overlay_job_operations.py:572:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module app.database.image_operations
app/database/image_operations.py:145:0: C0301: Line too long (103/100) (line-too-long)
app/database/image_operations.py:1254:0: C0301: Line too long (105/100) (line-too-long)
app/database/image_operations.py:1:0: C0302: Too many lines in module (1329/1000) (too-many-lines)
app/database/image_operations.py:74:11: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/image_operations.py:95:57: E1135: Value 'Image.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/image_operations.py:123:61: E1135: Value 'Image.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/image_operations.py:151:4: R0913: Too many arguments (7/5) (too-many-arguments)
app/database/image_operations.py:151:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
app/database/image_operations.py:151:4: R0914: Too many local variables (25/15) (too-many-locals)
app/database/image_operations.py:610:4: R0913: Too many arguments (7/5) (too-many-arguments)
app/database/image_operations.py:610:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
app/database/image_operations.py:610:4: R0914: Too many local variables (25/15) (too-many-locals)
app/database/image_operations.py:850:4: C0116: Missing function or method docstring (missing-function-docstring)
app/database/image_operations.py:871:0: C0115: Missing class docstring (missing-class-docstring)
app/database/image_operations.py:879:61: E1135: Value 'Image.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/image_operations.py:1004:4: R0913: Too many arguments (6/5) (too-many-arguments)
app/database/image_operations.py:1004:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
app/database/image_operations.py:1193:16: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
app/database/image_operations.py:1244:4: R0913: Too many arguments (7/5) (too-many-arguments)
app/database/image_operations.py:1244:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
app/database/image_operations.py:1244:4: R0914: Too many local variables (17/15) (too-many-locals)
************* Module app.database.log_operations
app/database/log_operations.py:43:55: E1135: Value 'Log.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/log_operations.py:58:4: R0913: Too many arguments (9/5) (too-many-arguments)
app/database/log_operations.py:58:4: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
app/database/log_operations.py:58:4: R0914: Too many local variables (23/15) (too-many-locals)
app/database/log_operations.py:274:4: R0913: Too many arguments (7/5) (too-many-arguments)
app/database/log_operations.py:274:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
app/database/log_operations.py:326:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/log_operations.py:341:0: W0613: Unused argument 'kwargs' (unused-argument)
app/database/log_operations.py:353:4: R0913: Too many arguments (7/5) (too-many-arguments)
app/database/log_operations.py:353:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
app/database/log_operations.py:404:16: W0719: Raising too general exception: Exception (broad-exception-raised)
************* Module app.database.corruption_operations
app/database/corruption_operations.py:218:0: C0301: Line too long (122/100) (line-too-long)
app/database/corruption_operations.py:466:0: C0301: Line too long (130/100) (line-too-long)
app/database/corruption_operations.py:485:0: C0301: Line too long (130/100) (line-too-long)
app/database/corruption_operations.py:505:0: C0301: Line too long (130/100) (line-too-long)
app/database/corruption_operations.py:79:49: E1135: Value 'CorruptionLogEntry.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/corruption_operations.py:87:49: E1135: Value 'CorruptionStats.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/corruption_operations.py:97:49: E1135: Value 'CameraWithCorruption.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/corruption_operations.py:101:4: R0913: Too many arguments (7/5) (too-many-arguments)
app/database/corruption_operations.py:101:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
app/database/corruption_operations.py:101:4: R0914: Too many local variables (21/15) (too-many-locals)
app/database/corruption_operations.py:230:16: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
app/database/corruption_operations.py:575:49: E1135: Value 'CorruptionLogEntry.model_fields' doesn't support membership test (unsupported-membership-test)
app/database/corruption_operations.py:579:4: R0913: Too many arguments (9/5) (too-many-arguments)
app/database/corruption_operations.py:579:4: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
app/database/corruption_operations.py:638:16: W0719: Raising too general exception: Exception (broad-exception-raised)
app/database/corruption_operations.py:938:15: W0718: Catching too general exception Exception (broad-exception-caught)
app/database/corruption_operations.py:894:30: W0613: Unused argument 'corruption_score' (unused-argument)
app/database/corruption_operations.py:15:0: C0411: third party import "loguru.logger" should be placed before local import "models.corruption_model.CorruptionLogsPage" (wrong-import-order)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[446:538]
==app.database.overlay_operations:[523:612]
        self.db = db

    # ================================================================
    # OVERLAY PRESETS OPERATIONS (SYNC)
    # ================================================================

    def create_preset(
        self, preset_data: OverlayPresetCreate
    ) -> Optional[OverlayPreset]:
        """Create a new overlay preset (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        INSERT INTO overlay_presets (name, description, overlay_config, is_builtin)
                        VALUES (%s, %s, %s, %s)
                        RETURNING id, name, description, overlay_config, is_builtin, created_at, updated_at
                        """,
                        (
                            preset_data.name,
                            preset_data.description,
                            json.dumps(preset_data.overlay_config.model_dump()),
                            preset_data.is_builtin,
                        ),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_overlay_preset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to create overlay preset (sync): {e}")
            return None

    def get_preset_by_id(self, preset_id: int) -> Optional[OverlayPreset]:
        """Get overlay preset by ID (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        SELECT id, name, description, overlay_config, is_builtin, created_at, updated_at
                        FROM overlay_presets
                        WHERE id = %s
                        """,
                        (preset_id,),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_overlay_preset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to get overlay preset {preset_id} (sync): {e}")
            return None

    def get_timelapse_overlay(self, timelapse_id: int) -> Optional[TimelapseOverlay]:
        """Get overlay configuration for timelapse (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        SELECT id, timelapse_id, preset_id, overlay_config, enabled, created_at, updated_at
                        FROM timelapse_overlays
                        WHERE timelapse_id = %s
                        """,
                        (timelapse_id,),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_timelapse_overlay(dict(row))
                    return None

        except Exception as e:
            logger.error(
                f"Failed to get timelapse overlay for {timelapse_id} (sync): {e}"
            )
            return None

    def get_all_presets(self, include_builtin: bool = True) -> List[OverlayPreset]:
        """Get all overlay presets (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur: (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[483:560]
==app.database.overlay_operations:[533:612]
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        SELECT id, image_id, priority, status, job_type, retry_count,
                                error_message, created_at, started_at, completed_at
                        FROM overlay_generation_jobs
                        WHERE status = %s
                        ORDER BY
                            CASE priority
                                WHEN 'high' THEN 1
                                WHEN 'medium' THEN 2
                                WHEN 'low' THEN 3
                            END,
                            created_at ASC
                        LIMIT %s
                        """,
                        (JobStatus.PENDING, limit),
                    )

                    rows = cur.fetchall()
                    return [_row_to_overlay_job(dict(row)) for row in rows]

        except Exception as e:
            logger.error(f"Failed to get pending overlay generation jobs (sync): {e}")
            return []

    def mark_job_processing(self, job_id: int) -> bool:
        """Mark job as processing (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        UPDATE overlay_generation_jobs
                        SET status = %s, started_at = NOW()
                        WHERE id = %s
                        """,
                        (JobStatus.PROCESSING, job_id),
                    )

                    return cur.rowcount > 0

        except Exception as e:
            logger.error(
                f"Failed to mark overlay job {job_id} as processing (sync): {e}"
            )
            return False

    def mark_job_completed(self, job_id: int) -> bool:
        """Mark job as completed (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        UPDATE overlay_generation_jobs
                        SET status = %s, completed_at = NOW()
                        WHERE id = %s
                        """,
                        (JobStatus.COMPLETED, job_id),
                    )

                    return cur.rowcount > 0

        except Exception as e:
            logger.error(
                f"Failed to mark overlay job {job_id} as completed (sync): {e}"
            )
            return False

    def mark_job_failed(self, job_id: int, error_message: str) -> bool:
        """Mark job as failed (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur: (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[452:535]
==app.database.overlay_operations:[823:884]
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        INSERT INTO overlay_assets (filename, original_name, file_path, file_size, mime_type)
                        VALUES (%s, %s, %s, %s, %s)
                        RETURNING id, filename, original_name, file_path, file_size, mime_type, uploaded_at
                        """,
                        (
                            asset_data.filename,
                            asset_data.original_name,
                            asset_data.file_path,
                            asset_data.file_size,
                            asset_data.mime_type,
                        ),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_overlay_asset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to create overlay asset (sync): {e}")
            return None

    def get_asset_by_id(self, asset_id: int) -> Optional[OverlayAsset]:
        """Get overlay asset by ID (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        SELECT id, filename, original_name, file_path, file_size, mime_type, uploaded_at
                        FROM overlay_assets
                        WHERE id = %s
                        """,
                        (asset_id,),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_overlay_asset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to get overlay asset {asset_id} (sync): {e}")
            return None

    def get_all_assets(self) -> List[OverlayAsset]:
        """Get all overlay assets (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        SELECT id, filename, original_name, file_path, file_size, mime_type, uploaded_at
                        FROM overlay_assets
                        ORDER BY uploaded_at DESC
                        """ (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[513:561]
==app.database.overlay_operations:[533:609]
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        UPDATE overlay_generation_jobs
                        SET status = %s, started_at = NOW()
                        WHERE id = %s
                        """,
                        (JobStatus.PROCESSING, job_id),
                    )

                    return cur.rowcount > 0

        except Exception as e:
            logger.error(
                f"Failed to mark overlay job {job_id} as processing (sync): {e}"
            )
            return False

    def mark_job_completed(self, job_id: int) -> bool:
        """Mark job as completed (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        UPDATE overlay_generation_jobs
                        SET status = %s, completed_at = NOW()
                        WHERE id = %s
                        """,
                        (JobStatus.COMPLETED, job_id),
                    )

                    return cur.rowcount > 0

        except Exception as e:
            logger.error(
                f"Failed to mark overlay job {job_id} as completed (sync): {e}"
            )
            return False

    def mark_job_failed(self, job_id: int, error_message: str) -> bool:
        """Mark job as failed (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute( (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[452:516]
==app.database.overlay_operations:[561:612]
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        SELECT id, name, description, overlay_config, is_builtin, created_at, updated_at
                        FROM overlay_presets
                        WHERE id = %s
                        """,
                        (preset_id,),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_overlay_preset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to get overlay preset {preset_id} (sync): {e}")
            return None

    def get_timelapse_overlay(self, timelapse_id: int) -> Optional[TimelapseOverlay]:
        """Get overlay configuration for timelapse (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        SELECT id, timelapse_id, preset_id, overlay_config, enabled, created_at, updated_at
                        FROM timelapse_overlays
                        WHERE timelapse_id = %s
                        """,
                        (timelapse_id,),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_timelapse_overlay(dict(row))
                    return None

        except Exception as e:
            logger.error(
                f"Failed to get timelapse overlay for {timelapse_id} (sync): {e}"
            )
            return None

    def get_all_presets(self, include_builtin: bool = True) -> List[OverlayPreset]:
        """Get all overlay presets (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur: (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[56:138]
==app.database.overlay_operations:[87:156]
        self.db = db

    async def create_job(
        self, job_data: OverlayGenerationJobCreate
    ) -> Optional[OverlayGenerationJob]:
        """
        Create a new overlay generation job.

        Args:
            job_data: Job creation data

        Returns:
            Created job or None if creation failed
        """
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        """
                        INSERT INTO overlay_generation_jobs (image_id, priority, status, job_type)
                        VALUES (%s, %s, %s, %s)
                        RETURNING id, image_id, priority, status, job_type, retry_count,
                                 error_message, created_at, started_at, completed_at
                        """,
                        (
                            job_data.image_id,
                            job_data.priority,
                            job_data.status,
                            job_data.job_type,
                        ),
                    )

                    row = await cur.fetchone()
                    if row:
                        return _row_to_overlay_job(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to create overlay generation job: {e}")
            return None

    async def get_job_by_id(self, job_id: int) -> Optional[OverlayGenerationJob]:
        """Get overlay generation job by ID"""
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        """
                        SELECT id, image_id, priority, status, job_type, retry_count,
                                error_message, created_at, started_at, completed_at
                        FROM overlay_generation_jobs
                        WHERE id = %s
                        """,
                        (job_id,),
                    )

                    row = await cur.fetchone()
                    if row:
                        return _row_to_overlay_job(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to get overlay generation job {job_id}: {e}")
            return None

    async def get_pending_jobs(
        self, limit: int = DEFAULT_OVERLAY_JOB_BATCH_SIZE
    ) -> List[OverlayGenerationJob]:
        """
        Get pending overlay generation jobs ordered by priority and creation time.

        Args:
            limit: Maximum number of jobs to retrieve

        Returns:
            List of pending jobs ordered by priority (high->medium->low) then by created_at
        """
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        """ (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[452:513]
==app.database.overlay_operations:[852:884]
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        SELECT id, filename, original_name, file_path, file_size, mime_type, uploaded_at
                        FROM overlay_assets
                        WHERE id = %s
                        """,
                        (asset_id,),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_overlay_asset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to get overlay asset {asset_id} (sync): {e}")
            return None

    def get_all_assets(self) -> List[OverlayAsset]:
        """Get all overlay assets (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        SELECT id, filename, original_name, file_path, file_size, mime_type, uploaded_at
                        FROM overlay_assets
                        ORDER BY uploaded_at DESC
                        """ (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[535:561]
==app.database.overlay_operations:[533:584]
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        INSERT INTO overlay_presets (name, description, overlay_config, is_builtin)
                        VALUES (%s, %s, %s, %s)
                        RETURNING id, name, description, overlay_config, is_builtin, created_at, updated_at
                        """,
                        (
                            preset_data.name,
                            preset_data.description,
                            json.dumps(preset_data.overlay_config.model_dump()),
                            preset_data.is_builtin,
                        ),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_overlay_preset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to create overlay preset (sync): {e}")
            return None

    def get_preset_by_id(self, preset_id: int) -> Optional[OverlayPreset]:
        """Get overlay preset by ID (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        SELECT id, name, description, overlay_config, is_builtin, created_at, updated_at
                        FROM overlay_presets
                        WHERE id = %s
                        """,
                        (preset_id,),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_overlay_preset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to get overlay preset {preset_id} (sync): {e}")
            return None

    def get_timelapse_overlay(self, timelapse_id: int) -> Optional[TimelapseOverlay]:
        """Get overlay configuration for timelapse (sync)""" (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[70:138]
==app.database.overlay_operations:[133:181]
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        """
                        SELECT id, name, description, overlay_config, is_builtin, created_at, updated_at
                        FROM overlay_presets
                        WHERE id = %s
                        """,
                        (preset_id,),
                    )

                    row = await cur.fetchone()
                    if row:
                        return _row_to_overlay_preset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to get overlay preset {preset_id}: {e}")
            return None

    async def get_preset_by_name(self, name: str) -> Optional[OverlayPreset]:
        """Get overlay preset by name"""
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        """
                        SELECT id, name, description, overlay_config, is_builtin, created_at, updated_at
                        FROM overlay_presets
                        WHERE name = %s
                        """,
                        (name,),
                    )

                    row = await cur.fetchone()
                    if row:
                        return _row_to_overlay_preset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to get overlay preset '{name}': {e}")
            return None

    async def get_all_presets(
        self, include_builtin: bool = True
    ) -> List[OverlayPreset]:
        """Get all overlay presets""" (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[388:438]
==app.database.overlay_operations:[105:156]
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        """
                        INSERT INTO overlay_presets (name, description, overlay_config, is_builtin)
                        VALUES (%s, %s, %s, %s)
                        RETURNING id, name, description, overlay_config, is_builtin, created_at, updated_at
                        """,
                        (
                            preset_data.name,
                            preset_data.description,
                            json.dumps(preset_data.overlay_config.model_dump()),
                            preset_data.is_builtin,
                        ),
                    )

                    row = await cur.fetchone()
                    if row:
                        return _row_to_overlay_preset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to create overlay preset: {e}")
            return None

    async def get_preset_by_id(self, preset_id: int) -> Optional[OverlayPreset]:
        """Get overlay preset by ID"""
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        """
                        SELECT id, name, description, overlay_config, is_builtin, created_at, updated_at
                        FROM overlay_presets
                        WHERE id = %s
                        """,
                        (preset_id,),
                    )

                    row = await cur.fetchone()
                    if row:
                        return _row_to_overlay_preset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to get overlay preset {preset_id}: {e}")
            return None

    async def get_preset_by_name(self, name: str) -> Optional[OverlayPreset]:
        """Get overlay preset by name""" (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[452:486]
==app.database.overlay_operations:[584:612]
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        SELECT id, timelapse_id, preset_id, overlay_config, enabled, created_at, updated_at
                        FROM timelapse_overlays
                        WHERE timelapse_id = %s
                        """,
                        (timelapse_id,),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_timelapse_overlay(dict(row))
                    return None

        except Exception as e:
            logger.error(
                f"Failed to get timelapse overlay for {timelapse_id} (sync): {e}"
            )
            return None

    def get_all_presets(self, include_builtin: bool = True) -> List[OverlayPreset]:
        """Get all overlay presets (sync)"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur: (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[70:102]
==app.database.overlay_operations:[156:184]
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        """
                        SELECT id, name, description, overlay_config, is_builtin, created_at, updated_at
                        FROM overlay_presets
                        WHERE name = %s
                        """,
                        (name,),
                    )

                    row = await cur.fetchone()
                    if row:
                        return _row_to_overlay_preset(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to get overlay preset '{name}': {e}")
            return None

    async def get_all_presets(
        self, include_builtin: bool = True
    ) -> List[OverlayPreset]:
        """Get all overlay presets"""
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur: (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[141:147]
==app.database.thumbnail_job_operations:[97:103]
                WHERE status = %s
                ORDER BY
                    CASE priority
                        WHEN 'high' THEN 1
                        WHEN 'medium' THEN 2
                        WHEN 'low' THEN 3 (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.corruption_operations:[435:477]
==app.database.weather_operations:[41:131]
        async with self.db.get_connection() as conn:
            async with conn.cursor() as cur:
                await cur.execute(
                    """
                    INSERT INTO weather_data (
                        single_row_enforcer,
                        weather_date_fetched,
                        current_temp,
                        current_weather_icon,
                        current_weather_description,
                        sunrise_timestamp,
                        sunset_timestamp,
                        api_key_valid,
                        api_failing,
                        error_response_code,
                        last_error_message,
                        consecutive_failures
                    ) VALUES (
                        1, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, 0
                    )
                    ON CONFLICT (single_row_enforcer) DO UPDATE SET
                        weather_date_fetched = EXCLUDED.weather_date_fetched,
                        current_temp = EXCLUDED.current_temp,
                        current_weather_icon = EXCLUDED.current_weather_icon,
                        current_weather_description = EXCLUDED.current_weather_description,
                        sunrise_timestamp = EXCLUDED.sunrise_timestamp,
                        sunset_timestamp = EXCLUDED.sunset_timestamp,
                        api_key_valid = EXCLUDED.api_key_valid,
                        api_failing = EXCLUDED.api_failing,
                        error_response_code = EXCLUDED.error_response_code,
                        last_error_message = EXCLUDED.last_error_message,
                        consecutive_failures = CASE
                            WHEN EXCLUDED.api_failing = true AND weather_data.api_failing = true
                            THEN weather_data.consecutive_failures + 1
                            ELSE 0
                        END,
                        updated_at = NOW()
                    RETURNING id
                """,
                    (
                        weather_date_fetched,
                        current_temp,
                        current_weather_icon,
                        current_weather_description,
                        sunrise_timestamp,
                        sunset_timestamp,
                        api_key_valid,
                        api_failing,
                        error_response_code,
                        last_error_message,
                    ),
                )
                row = await cur.fetchone()
                if row:
                    weather_id = row["id"]
                    return weather_id
                else:
                    raise Exception("No row returned from weather data upsert")

    async def update_weather_failure(
        self,
        error_response_code: Optional[int] = None,
        last_error_message: Optional[str] = None,
    ) -> None:
        """Update weather data with failure information."""
        async with self.db.get_connection() as conn:
            async with conn.cursor() as cur:
                # Update existing row with failure info and increment consecutive failures
                await cur.execute(
                    """
                    UPDATE weather_data
                    SET
                        api_key_valid = false,
                        error_response_code = %s,
                        last_error_message = %s,
                        consecutive_failures = consecutive_failures + 1,
                        api_failing = (consecutive_failures + 1) >= 4,
                        updated_at = NOW()
                    WHERE single_row_enforcer = 1
                """,
                    (error_response_code, last_error_message),
                )
                await conn.commit()

    async def get_weather_for_hour(
        self, target_datetime: datetime
    ) -> Optional[Dict[str, Any]]:
        """Get weather data (returns current weather since we only maintain one row)."""
        # With single-row table, we always return current weather
        # The target_datetime parameter is kept for backward compatibility (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.health_operations:[76:91]
==app.database.statistics_operations:[57:71]
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        """
                    SELECT
                        COUNT(*) as total_cameras,
                        COUNT(CASE WHEN enabled = true THEN 1 END) as enabled_cameras,
                        COUNT(CASE WHEN degraded_mode_active = true THEN 1 END) as degraded_cameras,
                        COUNT(CASE WHEN corruption_detection_heavy = true THEN 1 END) as cameras_with_heavy_detection
                    FROM cameras
                    """
                    )
                    camera_stats = await cur.fetchone() (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.corruption_operations:[148:155]
==app.database.log_operations:[115:122]
        where_clause = " AND ".join(where_conditions) if where_conditions else "1=1"

        async with self.db.get_connection() as conn:
            async with conn.cursor() as cur:
                # Get total count
                count_query = f"""
                SELECT COUNT(*) as total_count (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.corruption_operations:[379:404]
==app.database.weather_operations:[41:109]
        async with self.db.get_connection() as conn:
            async with conn.cursor() as cur:
                await cur.execute(
                    """
                    SELECT corruption_detection_heavy
                    FROM cameras
                    WHERE id = %s
                    """,
                    (camera_id,),
                )
                camera_data = await cur.fetchone()
                if not camera_data:
                    raise ValueError(f"Camera {camera_id} not found")

                return {
                    "corruption_detection_heavy": camera_data[
                        "corruption_detection_heavy"
                    ]
                    or False
                }

    async def get_total_cameras_count(self) -> int:
        """Get total number of cameras."""
        async with self.db.get_connection() as conn:
            async with conn.cursor() as cur: (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[452:484]
==app.database.overlay_operations:[703:735]
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(
                        """
                        INSERT INTO overlay_generation_jobs (image_id, priority, status, job_type)
                        VALUES (%s, %s, %s, %s)
                        RETURNING id, image_id, priority, status, job_type, retry_count,
                                error_message, created_at, started_at, completed_at
                        """,
                        (
                            job_data.image_id,
                            job_data.priority,
                            job_data.status,
                            job_data.job_type,
                        ),
                    )

                    row = cur.fetchone()
                    if row:
                        return _row_to_overlay_job(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to create overlay generation job (sync): {e}")
            return None

    def get_pending_jobs(
        self, limit: int = DEFAULT_OVERLAY_JOB_BATCH_SIZE
    ) -> List[OverlayGenerationJob]:
        """Get pending overlay generation jobs (sync)"""
        try: (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_job_operations:[70:100]
==app.database.overlay_operations:[309:336]
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        """
                        INSERT INTO overlay_generation_jobs (image_id, priority, status, job_type)
                        VALUES (%s, %s, %s, %s)
                        RETURNING id, image_id, priority, status, job_type, retry_count,
                                 error_message, created_at, started_at, completed_at
                        """,
                        (
                            job_data.image_id,
                            job_data.priority,
                            job_data.status,
                            job_data.job_type,
                        ),
                    )

                    row = await cur.fetchone()
                    if row:
                        return _row_to_overlay_job(dict(row))
                    return None

        except Exception as e:
            logger.error(f"Failed to create overlay generation job: {e}")
            return None

    async def get_job_by_id(self, job_id: int) -> Optional[OverlayGenerationJob]:
        """Get overlay generation job by ID"""
        try: (duplicate-code)
app/database/corruption_operations.py:1:0: R0801: Similar lines in 2 files
==app.database.overlay_operations:[87:133]
==app.database.statistics_operations:[48:69]
        self.db = db

    async def get_dashboard_stats(self) -> DashboardStatsModel:
        """
        Get comprehensive dashboard statistics.

        Returns:
            Dictionary containing system-wide statistics
        """
        try:
            async with self.db.get_connection() as conn:
                async with conn.cursor() as cur:
                    await cur.execute(
                        """
                    SELECT
                        COUNT(*) as total_cameras,
                        COUNT(CASE WHEN enabled = true THEN 1 END) as enabled_cameras,
                        COUNT(CASE WHEN degraded_mode_active = true THEN 1 END) as degraded_cameras,
                        COUNT(CASE WHEN corruption_detection_heavy = true THEN 1 END) as cameras_with_heavy_detection
                    FROM cameras
                    """ (duplicate-code)

------------------------------------------------------------------
Your code has been rated at 8.92/10 (previous run: 8.84/10, +0.08)

