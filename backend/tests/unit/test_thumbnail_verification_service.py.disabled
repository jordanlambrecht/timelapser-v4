#!/usr/bin/env python3
"""
Unit tests for ThumbnailVerificationService.

Tests the verification service including file existence checking,
integrity verification, bulk operations, and repair coordination.
"""

import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime
from pathlib import Path

from app.services.thumbnail_verification_service import ThumbnailVerificationService
from app.models.shared_models import (
    ThumbnailVerificationResult,
    ThumbnailVerificationSummary,
    ThumbnailRepairRequest,
    ThumbnailRepairResult,
)
from app.models.image_model import Image, ImageWithDetails
from app.constants import THUMBNAIL_JOB_PRIORITY_MEDIUM


@pytest.mark.unit
@pytest.mark.thumbnail
class TestThumbnailVerificationService:
    """Test suite for ThumbnailVerificationService."""

    @pytest.fixture
    def verification_service(
        self, mock_image_operations, mock_thumbnail_job_operations, mock_sse_operations
    ):
        """Create ThumbnailVerificationService with mock dependencies."""
        return ThumbnailVerificationService(
            image_ops=mock_image_operations,
            thumbnail_job_ops=mock_thumbnail_job_operations,
            sse_operations=mock_sse_operations,
        )

    @pytest.fixture
    def sample_image_with_thumbnails(self, mock_image_operations):
        """Create sample image with thumbnail paths."""
        image = mock_image_operations.add_test_image(
            camera_id=1, timelapse_id=1, has_thumbnails=True
        )
        return image

    @pytest.fixture
    def sample_image_without_thumbnails(self, mock_image_operations):
        """Create sample image without thumbnail paths."""
        image = mock_image_operations.add_test_image(
            camera_id=1, timelapse_id=1, has_thumbnails=False
        )
        return image

    @pytest.mark.asyncio
    async def test_verify_single_image_with_existing_thumbnails(
        self, verification_service, sample_image_with_thumbnails
    ):
        """Test verification of image with existing thumbnail files."""
        image_id = sample_image_with_thumbnails.id

        # Mock file existence checks
        with patch("pathlib.Path.exists") as mock_exists:
            mock_exists.return_value = True  # Both files exist

            # Verify image
            result = await verification_service.verify_single_image(image_id)

            # Assertions
            assert isinstance(result, ThumbnailVerificationResult)
            assert result.image_id == image_id
            assert result.thumbnail_exists is True
            assert result.small_exists is True
            assert result.missing_files == []
            # Removed assertion for result.needs_repair as it does not exist

    @pytest.mark.asyncio
    async def test_verify_single_image_with_missing_thumbnails(
        self, verification_service, sample_image_with_thumbnails
    ):
        """Test verification of image with missing thumbnail files."""
        image_id = sample_image_with_thumbnails.id

        # Mock file existence checks - files don't exist
        with patch("pathlib.Path.exists") as mock_exists:
            mock_exists.return_value = False

            # Verify image
            result = await verification_service.verify_single_image(image_id)

            # Assertions
            assert result.image_id == image_id
            assert result.thumbnail_exists is False
            assert result.small_exists is False
            assert len(result.missing_files) == 2
            # Check that repair is needed by checking missing files
            assert len(result.missing_files) > 0

    @pytest.mark.asyncio
    async def test_verify_single_image_partial_missing(
        self, verification_service, sample_image_with_thumbnails
    ):
        """Test verification of image with partially missing thumbnails."""
        image_id = sample_image_with_thumbnails.id

        # Mock file existence checks - only thumbnail exists
        def mock_exists_side_effect(self):
            return "thumb_" in str(self)  # Only thumbnail files exist

        with patch("pathlib.Path.exists", side_effect=mock_exists_side_effect):
            # Verify image
            result = await verification_service.verify_single_image(image_id)

            # Assertions
            assert result.image_id == image_id
            assert result.thumbnail_exists is True
            assert result.small_exists is False
            assert len(result.missing_files) == 1
            # Check that repair is needed by checking missing files
            assert len(result.missing_files) > 0

    @pytest.mark.asyncio
    async def test_verify_single_image_no_thumbnail_paths(
        self, verification_service, sample_image_without_thumbnails
    ):
        """Test verification of image without thumbnail paths in database."""
        image_id = sample_image_without_thumbnails.id

        # Verify image
        result = await verification_service.verify_single_image(image_id)

        # Assertions
        assert result.image_id == image_id
        assert result.thumbnail_exists is False
        assert result.small_exists is False
        assert result.missing_files == []  # No paths to check
        # Should need repair since no thumbnails exist
        assert not result.thumbnail_exists and not result.small_exists

    @pytest.mark.asyncio
    async def test_verify_single_image_not_found(
        self, verification_service, mock_image_operations
    ):
        """Test verification of non-existent image."""
        non_existent_id = 999

        # Verify non-existent image
        result = await verification_service.verify_single_image(non_existent_id)

        # Should return None or handle gracefully
        assert result is None or result.image_id == non_existent_id

    @pytest.mark.asyncio
    async def test_verify_bulk_images_by_ids(
        self, verification_service, mock_image_operations
    ):
        """Test bulk verification of specific image IDs."""
        # Add test images
        images = []
        for i in range(5):
            image = mock_image_operations.add_test_image(
                camera_id=1,
                timelapse_id=1,
                has_thumbnails=(i % 2 == 0),  # Alternate having thumbnails
            )
            images.append(image)

        image_ids = [img.id for img in images]

        # Mock file existence - files exist for images with thumbnail paths
        def mock_exists_side_effect(self):
            return "thumb_" in str(self) or "small_" in str(self)

        with patch("pathlib.Path.exists", side_effect=mock_exists_side_effect):
            # Verify bulk images
            result = await verification_service.verify_bulk_images(image_ids=image_ids)

            # Assertions
            assert isinstance(result, ThumbnailVerificationSummary)
            assert result.total_images_checked == 5
            # Some images should have thumbnails (those with thumbnail paths and files exist)
            assert result.images_with_thumbnails > 0
            # Some images should be missing thumbnails (those without thumbnail paths)
            assert result.images_missing_thumbnails >= 0

    @pytest.mark.asyncio
    async def test_verify_bulk_images_by_cameras(
        self, verification_service, mock_image_operations
    ):
        """Test bulk verification by camera IDs."""
        # Add test images for multiple cameras
        camera_ids = [1, 2]
        for camera_id in camera_ids:
            for i in range(3):
                mock_image_operations.add_test_image(
                    camera_id=camera_id, timelapse_id=1, has_thumbnails=True
                )

        # Mock file existence
        with patch("pathlib.Path.exists", return_value=True):
            # Verify by cameras
            result = await verification_service.verify_bulk_images(
                camera_ids=camera_ids
            )

            # Assertions
            assert result.total_images_checked == 6  # 3 images per camera
            assert result.images_with_thumbnails >= 0  # Some may have thumbnails

    @pytest.mark.asyncio
    async def test_verify_bulk_images_by_timelapses(
        self, verification_service, mock_image_operations
    ):
        """Test bulk verification by timelapse IDs."""
        # Add test images for multiple timelapses
        timelapse_ids = [1, 2]
        for timelapse_id in timelapse_ids:
            for i in range(2):
                mock_image_operations.add_test_image(
                    camera_id=1, timelapse_id=timelapse_id, has_thumbnails=True
                )

        # Mock file existence
        with patch("pathlib.Path.exists", return_value=True):
            # Verify by timelapses
            result = await verification_service.verify_bulk_images(
                timelapse_ids=timelapse_ids
            )

            # Assertions
            assert result.total_images_checked == 4  # 2 images per timelapse
            assert result.images_with_thumbnails >= 0  # Some may have thumbnails

    @pytest.mark.asyncio
    async def test_verify_bulk_images_with_thumbnails_only(
        self, verification_service, mock_image_operations
    ):
        """Test bulk verification of images that should have thumbnails."""
        # Add mix of images with and without thumbnails
        for i in range(5):
            mock_image_operations.add_test_image(
                camera_id=1,
                timelapse_id=1,
                has_thumbnails=(i < 3),  # First 3 have thumbnails
            )

        # Mock file existence
        with patch("pathlib.Path.exists", return_value=True):
            # Verify only images with thumbnails
            result = await verification_service.verify_bulk_images(
                with_thumbnails_only=True
            )

            # Should only check images that have thumbnail paths
            assert result.total_images_checked == 3
            assert result.images_with_thumbnails >= 0

    @pytest.mark.asyncio
    async def test_repair_missing_thumbnails_queue_regeneration(
        self, verification_service, mock_thumbnail_job_operations, mock_sse_operations
    ):
        """Test repairing missing thumbnails by queuing regeneration jobs."""
        image_ids = [1, 2, 3]
        repair_request = ThumbnailRepairRequest(
            image_ids=image_ids,
            priority=THUMBNAIL_JOB_PRIORITY_MEDIUM,
        )

        # Mock job creation success
        mock_thumbnail_job_operations.create_job = AsyncMock(
            return_value=MagicMock(id=1)
        )

        # Repair missing thumbnails
        result = await verification_service.repair_missing_thumbnails(repair_request)

        # Assertions
        assert isinstance(result, ThumbnailRepairResult)
        assert result.success is True
        assert result.repair_jobs_queued == 3
        assert result.images_processed >= 0
        assert len(result.errors) == 0

        # Verify jobs were created
        assert mock_thumbnail_job_operations.create_job.call_count == 3

        # Verify SSE event was sent
        events = mock_sse_operations.get_events("thumbnail_repair_initiated")
        assert len(events) == 1

    @pytest.mark.asyncio
    async def test_repair_missing_thumbnails_update_database(
        self, verification_service, mock_image_operations
    ):
        """Test repairing by updating database paths (not implemented in mock)."""
        image_ids = [1, 2]
        repair_request = ThumbnailRepairRequest(image_ids=image_ids)

        # Repair missing thumbnails
        result = await verification_service.repair_missing_thumbnails(repair_request)

        # Should handle gracefully even if not fully implemented
        assert isinstance(result, ThumbnailRepairResult)
        assert result.images_processed >= 0

    @pytest.mark.asyncio
    async def test_repair_missing_thumbnails_partial_failure(
        self, verification_service, mock_thumbnail_job_operations, mock_sse_operations
    ):
        """Test repair operation with some failures."""
        image_ids = [1, 2, 3]
        repair_request = ThumbnailRepairRequest(
            image_ids=image_ids,
            priority=THUMBNAIL_JOB_PRIORITY_MEDIUM,
        )

        # Mock partial job creation failure
        def create_job_side_effect(job_data):
            if job_data.image_id == 2:
                return None  # Simulate failure for image 2
            return MagicMock(id=job_data.image_id)

        mock_thumbnail_job_operations.create_job = AsyncMock(
            side_effect=create_job_side_effect
        )

        # Repair missing thumbnails
        result = await verification_service.repair_missing_thumbnails(repair_request)

        # Assertions
        assert isinstance(result, ThumbnailRepairResult)
        # The mock causes some jobs to fail, so we should have fewer than 3 jobs queued
        assert result.repair_jobs_queued < 3
        # Should have some errors recorded
        assert len(result.errors) > 0

    @pytest.mark.asyncio
    async def test_verify_with_both_structures_legacy_and_new(
        self, verification_service, sample_image_with_thumbnails
    ):
        """Test verification that checks both legacy and new file structures."""
        image_id = sample_image_with_thumbnails.id

        # Mock file existence checks for both structures
        with patch("pathlib.Path.exists") as mock_exists:
            # New structure doesn't exist, legacy structure does
            def exists_side_effect(self):
                path_str = str(self)
                return "camera-" in path_str  # Legacy structure exists

            mock_exists.side_effect = exists_side_effect

            # Verify with both structures
            result = await verification_service.verify_single_image(
                image_id, check_both_structures=True
            )

            # Should detect files in legacy structure
            assert isinstance(result, ThumbnailVerificationResult)

    @pytest.mark.asyncio
    async def test_verification_performance_with_large_batch(
        self, verification_service, mock_image_operations
    ):
        """Test verification performance with large number of images."""
        # Add many test images
        for i in range(100):
            mock_image_operations.add_test_image(
                camera_id=1, timelapse_id=1, has_thumbnails=True
            )

        # Mock file existence
        with patch("pathlib.Path.exists", return_value=True):
            # Verify large batch
            result = await verification_service.verify_bulk_images(limit=100)

            # Should handle large batches efficiently
            assert result.total_images_checked <= 100  # Respects limit
            assert (
                result.images_with_thumbnails + result.images_missing_thumbnails
                <= result.total_images_checked
            )

    @pytest.mark.asyncio
    async def test_verification_error_handling(
        self, verification_service, mock_image_operations
    ):
        """Test verification error handling when file system operations fail."""
        image = mock_image_operations.add_test_image(has_thumbnails=True)

        # Mock file existence to raise an exception
        with patch("pathlib.Path.exists", side_effect=PermissionError("Access denied")):
            # Verification should handle errors gracefully
            result = await verification_service.verify_single_image(image.id)

            # Should return result indicating verification couldn't be completed
            assert isinstance(result, ThumbnailVerificationResult)
            # Implementation might mark as needs_repair or handle differently

    @pytest.mark.asyncio
    async def test_sse_event_broadcasting_during_verification(
        self, verification_service, mock_image_operations, mock_sse_operations
    ):
        """Test that SSE events are broadcast during verification operations."""
        # Add test images
        for i in range(5):
            mock_image_operations.add_test_image(has_thumbnails=True)

        # Mock file existence
        with patch("pathlib.Path.exists", return_value=False):  # Missing files
            # Run bulk verification
            result = await verification_service.verify_bulk_images()

            # Check for SSE events
            events = mock_sse_operations.get_events()
            assert len(events) > 0  # Should broadcast verification progress

    @pytest.mark.asyncio
    async def test_verification_with_empty_results(
        self, verification_service, mock_image_operations
    ):
        """Test verification when no images match criteria."""
        # Don't add any images or add images without thumbnails

        # Verify with criteria that won't match anything
        result = await verification_service.verify_bulk_images(
            camera_ids=[999], with_thumbnails_only=True  # Non-existent camera
        )

        # Should handle empty results gracefully
        assert isinstance(result, ThumbnailVerificationSummary)
        assert result.total_images_checked == 0
        assert result.images_with_thumbnails == 0
        assert result.images_missing_thumbnails == 0
